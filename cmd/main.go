package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/xuri/excelize/v2"
)

func main() {
	inputDir := "./input"
	outputDir := "./output"
	os.MkdirAll(outputDir, 0755)

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
	cityData := make(map[string][][]string)

	// –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
	err := filepath.Walk(inputDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && strings.HasSuffix(strings.ToLower(info.Name()), ".xlsx") {
			fmt.Printf("üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: %s\n", path)
			processFile(path, cityData)
		}
		return nil
	})
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –ø–∞–ø–∫–∏:", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ –∏–∑ E4
	for city, rows := range cityData {
		outPath := filepath.Join(outputDir, fmt.Sprintf("%s.xlsx", city))
		file := excelize.NewFile()
		sheet := file.GetSheetName(0)
		for i, row := range rows {
			cell, _ := excelize.CoordinatesToCellName(1, i+1)
			file.SetSheetRow(sheet, cell, &row)
		}
		if err := file.SaveAs(outPath); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ %s: %v\n", outPath, err)
		} else {
			fmt.Printf("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: %s\n", outPath)
		}
	}

	fmt.Println("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ E4")
}

func processFile(filePath string, cityData map[string][][]string) {
	f, err := excelize.OpenFile(filePath)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err)
		return
	}
	defer f.Close()

	sheet := f.GetSheetName(0)
	// –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —è—á–µ–π–∫–∏ E4
	city, err := f.GetCellValue(sheet, "E4")
	if err != nil || strings.TrimSpace(city) == "" {
		fmt.Printf("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ %s –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ E4, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n", filePath)
		return
	}
	city = strings.TrimSpace(city)

	rows, err := f.GetRows(sheet)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫:", err)
		return
	}

	// –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–∞
	cityData[city] = append(cityData[city], rows...)
}
