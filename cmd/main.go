package main

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/xuri/excelize/v2"
)

func main() {
	inputDir := "./input"
	outputDir := "./output"
	os.MkdirAll(outputDir, 0755)

	// –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º
	cityData := make(map[string][][]string)

	err := filepath.Walk(inputDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && strings.HasSuffix(strings.ToLower(info.Name()), ".xlsx") {
			fmt.Printf("üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: %s\n", path)
			processFile(path, cityData)
		}
		return nil
	})
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞:", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º
	for city, rows := range cityData {
		filename := fmt.Sprintf("%s.xlsx", city)
		outPath := filepath.Join(outputDir, filename)

		f := excelize.NewFile()
		sheet := f.GetSheetName(0)

		for i, row := range rows {
			cell, _ := excelize.CoordinatesToCellName(1, i+1)
			f.SetSheetRow(sheet, cell, &row)
		}

		if err := f.SaveAs(outPath); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è %s: %v\n", filename, err)
		} else {
			fmt.Printf("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s\n", filename)
		}
	}

	fmt.Println("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º!")
}

func processFile(filePath string, cityData map[string][][]string) {
	f, err := excelize.OpenFile(filePath)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err)
		return
	}
	defer f.Close()

	sheet := "all"
	rows, err := f.GetRows(sheet)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ %s: %v\n", filePath, err)
		return
	}

	for i, row := range rows {
		if len(row) < 9 {
			continue
		}

		raw := row[8] // –∫–æ–ª–æ–Ω–∫–∞ I, –≥–æ—Ä–æ–¥
		city := extractCityName(raw)
		if city == "" {
			continue
		}

		cityData[city] = append(cityData[city], row)

		// –ó–∞–≥–æ–ª–æ–≤–∫–∏ (1-—è —Å—Ç—Ä–æ–∫–∞) –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
		if i == 0 {
			continue
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func extractCityName(s string) string {
	// –ü—Ä–∏–º–µ—Ä—ã: "–ú–ë–û–£ ¬´–°—Ä–µ–¥–Ω—è—è –û–® ‚Ññ 32¬ª –ö–∏—Ä–æ–≤—Å–∫–æ–≥–æ —Ä-–Ω–∞ –≥. –ö–∞–∑–∞–Ω–∏"
	// ‚Üí "–ö–∞–∑–∞–Ω—å", "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä" ‚Üí "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
	re := regexp.MustCompile(`(?i)(–≥\.?|–≥–æ—Ä–æ–¥)\s*([–ê-–Ø–∞-—èA-Za-z-]+)`)
	matches := re.FindStringSubmatch(s)
	if len(matches) >= 3 {
		return normalizeCity(matches[2])
	}

	// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ
	parts := strings.Fields(s)
	if len(parts) > 0 {
		last := parts[len(parts)-1]
		return normalizeCity(last)
	}

	return ""
}

// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
func normalizeCity(city string) string {
	city = strings.ToLower(city)
	city = strings.Trim(city, ".,¬´¬ª\"'")
	city = strings.Title(city)
	return city
}
